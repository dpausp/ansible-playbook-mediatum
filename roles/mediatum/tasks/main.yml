---
# install mediatum (some tasks are executed with sudo root)

- name: install build essentials
  apt: pkg=build-essential state=present

- name: install python system packages
  apt: pkg={{ item }} state=present
  with_items:
    - python-dev
    - python-reportlab
    - python-imaging
    - python-ldap
    - python-pypdf

- name: install python package for mysql
  apt: pkg=python-mysqldb state=present
  when: mediatum_db_type == "mysql"

- name: install python package for sqlite
  apt: pkg=python-sqlite state=present
  when: mediatum_db_type == "sqlite"

- name: install ffmpeg
  apt: pkg=ffmpeg state=present

- name: install some media libs / tools
  apt: pkg={{ item }} state=present
  with_items:
    - xpdf
    - libjpeg8-dev
    - libart-2.0-dev
    - libgif-dev
    - imagemagick
    - graphviz

- name: install pip
  apt: pkg=python-pip state=present

- name: install python packages via pip
  pip: name={{ item }} state=present
  with_items:
    - python-Levenshtein
    - pymarc
    - mollyZ3950
    - requests
    - pydot

- name: install curl
  apt: pkg=curl state=present

- name: install git
  apt: pkg=git state=present

- name: stop mediaTUM
  service: name=mediatum state=stopped
  ignore_errors: yes

- name: create mediatum group
  group: name={{ mediatum_group }} state=present

- name: create admin user / add to mediatum group
  user: name={{ mediatum_admin_user }} groups={{ mediatum_group }} group={{ mediatum_group }} state=present append=true shell=/bin/bash
  
- name: give passwordless sudo to mediatum_adm (only for development machines!)
  lineinfile: "dest=/etc/sudoers state=present 
    regexp='^mediatum_adm ALL= NOPASSWD' 
    line='mediatum_adm ALL= NOPASSWD: ALL'"
  when: mediatum_development == "yes"

- name: create mediatum basedir
  file: name={{ mediatum_basedir }} state=directory owner={{ mediatum_admin_user }} group={{ mediatum_group }} mode=0750
  notify: restart mediaTUM

- name: set mediatum_dir fact
  set_fact: mediatum_dir={{ mediatum_basedir }}/mediatum
  tags:
    - pull

- name: clone / pull mediaTUM git repository
  git: repo={{ mediatum_git_repo }} version={{ mediatum_git_version }} dest={{ mediatum_dir }} update={{ mediatum_git_update }}
  tags:
    - pull
  notify: restart mediaTUM

- name: fix ownership for mediatum dir
  file: name={{ mediatum_dir }} state=directory owner={{ mediatum_admin_user }} group={{ mediatum_group }} recurse=yes 
  tags:
    - pull
  notify: restart mediaTUM

- name: fix permissions (o-rwx) for mediatum dir
  command: chmod -R o-rwx {{ mediatum_dir }} 
  tags:
    - pull
  notify: restart mediaTUM

- name: create mediatum server user
  user: name={{ mediatum_server_user }} group={{ mediatum_group }} home={{ mediatum_basedir }} state=present

- name: make media dir
  file: path={{ mediatum_media_dir }} state=directory owner={{ mediatum_server_user }} group={{ mediatum_group }} mode=0750

- name: make logging dir
  file: path={{ mediatum_logdir }} state=directory owner={{ mediatum_server_user }} group={{ mediatum_group }} mode=0750

- name: make search dir
  file: path={{ mediatum_search_dir }} state=directory owner={{ mediatum_server_user }} group={{ mediatum_group }} mode=0750

- name: create mediaTUM config file
  template: src=mediatum.cfg.j2 dest={{ mediatum_dir }}/mediatum.cfg owner={{ mediatum_admin_user }} group={{ mediatum_group }} mode=0750

- name: create mediaTUM initscript (debian)
  template: src=mediatum_initscript_debian.j2 dest=/etc/init.d/mediatum owner=root group=adm mode=0750
  when: ansible_distribution == "Debian"
  tags: 
    - init

- name: create mediaTUM upstart conf (ubuntu)
  template: src=mediatum_upstart.conf.j2 dest=/etc/init/mediatum.conf owner=root group=adm mode=0750
  when: ansible_distribution == "Ubuntu"
  tags: 
    - init

- name: add mediaTUM initscript to runlevels to start on boot (debian)
  service: name=mediatum enabled=yes
  when: ansible_distribution == "Debian"
  tags: 
    - init

#- name: run checks
#  command: chdir={{ mediatum_dir }} python bin/checkrequirements.py
#  sudo: yes
#  sudo_user: $mediatum_server_user
#  tags:
#    - check

- name: start mediaTUM
  service: name=mediatum state=started
  tags: 
    - init

# vim: set filetype=yaml sw=2 ts=2 sts=2 expandtab:
